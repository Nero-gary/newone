#include "stdafx.h"
#include "stdlib.h"
#define MaxSize 100

typedef char ElemType;

typedef ElemType SqBTree[MaxSize];

typedef struct node
{
	ElemType data;
	struct node *lchild;
	struct node *rchild;
}BTNode;

void CreateBTNode(BTNode *&b, char *str) {
	BTNode *St[MaxSize], *p;
	int top = -1, k, j = 0;
	char ch;
	b = NULL;
	ch = str[j];
	while (ch != '\0') {
		switch (ch) {
			case '(':top++; St[top] = p; k = 1; break;
			case ')':top--; break;
			case ',':k = 2; break;
			default:p = (BTNode *)malloc(sizeof(BTNode));
				p->data = ch; p->lchild = p->rchild = NULL;
				if (b == NULL)b = p;
				else {
					switch (k) {
					case 1:St[top]->lchild = p; break;
					case 2:St[top]->rchild = p; break;
					}
				}
		}
		j++;
		ch = str[j];
	}
}
//创建
int BTNodeHeight(BTNode *b) {
	int lchildh, rchildh;
	if (b == NULL)return(0);
	else {
		lchildh = BTNodeHeight(b->lchild);
		rchildh = BTNodeHeight(b->rchild);
		return (lchildh > rchildh) ? (lchildh + 1) : (rchildh + 1);
	}
}
//树高
void PreOder(BTNode *b) {
	if (b != NULL) {
		printf("%c", b->data);
		PreOder(b->lchild);
		PreOder(b->rchild);
	}
}
//先序遍历
void InOder(BTNode *b) {
	if (b != NULL) {
		InOder(b->lchild);
		printf("%c", b->data);
		InOder(b->rchild);
	}
}
//中序遍历
void PostOder(BTNode *b) {
	if (b != NULL) {
		PostOder(b->lchild);
		PostOder(b->rchild);
		printf("%c", b -> data);

	}
}
//后序遍历
int NumLeaf(BTNode *b) {
	static int num=0;
	if (b != NULL) {
		if (b->lchild == NULL&&b->rchild == NULL)
			num++;
		NumLeaf(b->lchild);
		NumLeaf(b->rchild);
	}
	return num;
}
//叶子总数
BTNode *Find(BTNode *b, ElemType x) {
	BTNode *p;
	if (b == NULL)
		return NULL;
	else if (b->data==x)
		return b;
	else {
		p = Find(b->lchild, x);
		if (p != NULL)
			return p;
		else
			return Find(b->rchild, x);
	}
}
//查找
ElemType FindP(BTNode *b, ElemType x) {
	BTNode *p;
	ElemType N = 'N', M;
	if (Find(b, x) == NULL)return N;
	if ((b == NULL) || (b->data == x))
		return N;
	else if ((b->lchild->data == x) || (b->rchild->data == x))
		return b->data;
	else {
		if (b->rchild == NULL)
			return FindP(b->lchild, x);
		else
			M = FindP(b->rchild, x);
			if (M != N)
				return M;
	}

}
void FindPre(BTNode *b, ElemType x) {
	BTNode *num[MaxSize];
	BTNode *q;
	int top=-1;
	top++;
	num[top] = b;
	if (Find(b, x) == NULL)printf("不存在该节点！\n");
	else if ((b == NULL) || (b->data == x))printf("没有父母节点！\n");
	else {
		while (top > -1) {
			q = num[top];
			top--;
			if (q->lchild != NULL) {
				top++;
				num[top] = q->lchild;
				if (q->lchild->data == x) {
					printf("%c的父母节点是：%c\n", x, q->data);
					break;
				}
			}
			if (q->rchild != NULL) {
				top++;
				num[top] = q->rchild;
				if (q->rchild->data == x) {
					printf("%c的父母节点是：%c\n", x, q->data);
					break;
				}
			}
		}
	}
	
}
//找父母节点
void LevelOrder(BTNode *b) {
	BTNode *p;
	BTNode *qu[MaxSize];
	int front, rear;
	front = rear = -1;
	rear++;
	qu[rear] = b;
	while (front != rear) {
		front = (front + 1) % MaxSize;
		p = qu[front];
		printf("%c", p->data);
		if (p->lchild != NULL) {
			rear = (rear + 1) % MaxSize;
			qu[rear] = p->lchild;
		}
		if (p->rchild != NULL) {
			rear = (rear + 1) % MaxSize;
			qu[rear] = p->rchild;
		}
	}
}
//层次遍历
int main()
{
	BTNode *Btree;
	CreateBTNode(Btree,"A(B(D(,G)),C(E,F))");
	PreOder(Btree);
	printf_s("\n");
	InOder(Btree);
	printf_s("\n");
	PostOder(Btree);
	printf_s("\n");
	LevelOrder(Btree);
	printf_s("\n");
	printf_s("树高%d\n", BTNodeHeight(Btree));
	printf_s("叶子总数%d\n", NumLeaf(Btree));
	printf_s("输入查找的字母：\n");
	ElemType temp;
	//BTNode ctree;
	scanf_s("%c", &temp);
	FindPre(Btree, temp);
    return 0;
}
